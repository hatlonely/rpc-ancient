// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: api/ancient.proto

package api

import (
	context "context"
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/golang/protobuf/proto"
	empty "github.com/golang/protobuf/ptypes/empty"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type Ancient struct {
	Id                   int64    `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty" rule:"x >= 0"`
	Title                string   `protobuf:"bytes,2,opt,name=title,proto3" json:"title,omitempty"`
	Author               string   `protobuf:"bytes,3,opt,name=author,proto3" json:"author,omitempty"`
	Dynasty              string   `protobuf:"bytes,4,opt,name=dynasty,proto3" json:"dynasty,omitempty"`
	Content              string   `protobuf:"bytes,5,opt,name=content,proto3" json:"content,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Ancient) Reset()         { *m = Ancient{} }
func (m *Ancient) String() string { return proto.CompactTextString(m) }
func (*Ancient) ProtoMessage()    {}
func (*Ancient) Descriptor() ([]byte, []int) {
	return fileDescriptor_0fb5725f30f77c44, []int{0}
}
func (m *Ancient) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Ancient) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Ancient.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Ancient) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Ancient.Merge(m, src)
}
func (m *Ancient) XXX_Size() int {
	return m.Size()
}
func (m *Ancient) XXX_DiscardUnknown() {
	xxx_messageInfo_Ancient.DiscardUnknown(m)
}

var xxx_messageInfo_Ancient proto.InternalMessageInfo

func (m *Ancient) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *Ancient) GetTitle() string {
	if m != nil {
		return m.Title
	}
	return ""
}

func (m *Ancient) GetAuthor() string {
	if m != nil {
		return m.Author
	}
	return ""
}

func (m *Ancient) GetDynasty() string {
	if m != nil {
		return m.Dynasty
	}
	return ""
}

func (m *Ancient) GetContent() string {
	if m != nil {
		return m.Content
	}
	return ""
}

type GetAncientReq struct {
	Id                   int64    `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty" rule:"x >= 0"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetAncientReq) Reset()         { *m = GetAncientReq{} }
func (m *GetAncientReq) String() string { return proto.CompactTextString(m) }
func (*GetAncientReq) ProtoMessage()    {}
func (*GetAncientReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_0fb5725f30f77c44, []int{1}
}
func (m *GetAncientReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetAncientReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetAncientReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetAncientReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetAncientReq.Merge(m, src)
}
func (m *GetAncientReq) XXX_Size() int {
	return m.Size()
}
func (m *GetAncientReq) XXX_DiscardUnknown() {
	xxx_messageInfo_GetAncientReq.DiscardUnknown(m)
}

var xxx_messageInfo_GetAncientReq proto.InternalMessageInfo

func (m *GetAncientReq) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

type PutAncientReq struct {
	Ancient              *Ancient `protobuf:"bytes,1,opt,name=ancient,proto3" json:"ancient,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PutAncientReq) Reset()         { *m = PutAncientReq{} }
func (m *PutAncientReq) String() string { return proto.CompactTextString(m) }
func (*PutAncientReq) ProtoMessage()    {}
func (*PutAncientReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_0fb5725f30f77c44, []int{2}
}
func (m *PutAncientReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PutAncientReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PutAncientReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PutAncientReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PutAncientReq.Merge(m, src)
}
func (m *PutAncientReq) XXX_Size() int {
	return m.Size()
}
func (m *PutAncientReq) XXX_DiscardUnknown() {
	xxx_messageInfo_PutAncientReq.DiscardUnknown(m)
}

var xxx_messageInfo_PutAncientReq proto.InternalMessageInfo

func (m *PutAncientReq) GetAncient() *Ancient {
	if m != nil {
		return m.Ancient
	}
	return nil
}

type UpdateAncientReq struct {
	Ancient              *Ancient `protobuf:"bytes,1,opt,name=ancient,proto3" json:"ancient,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *UpdateAncientReq) Reset()         { *m = UpdateAncientReq{} }
func (m *UpdateAncientReq) String() string { return proto.CompactTextString(m) }
func (*UpdateAncientReq) ProtoMessage()    {}
func (*UpdateAncientReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_0fb5725f30f77c44, []int{3}
}
func (m *UpdateAncientReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UpdateAncientReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UpdateAncientReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UpdateAncientReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpdateAncientReq.Merge(m, src)
}
func (m *UpdateAncientReq) XXX_Size() int {
	return m.Size()
}
func (m *UpdateAncientReq) XXX_DiscardUnknown() {
	xxx_messageInfo_UpdateAncientReq.DiscardUnknown(m)
}

var xxx_messageInfo_UpdateAncientReq proto.InternalMessageInfo

func (m *UpdateAncientReq) GetAncient() *Ancient {
	if m != nil {
		return m.Ancient
	}
	return nil
}

type SearchAncientReq struct {
	Keyword              string   `protobuf:"bytes,1,opt,name=keyword,proto3" json:"keyword,omitempty"`
	Offset               int64    `protobuf:"varint,2,opt,name=offset,proto3" json:"offset,omitempty"`
	Limit                int64    `protobuf:"varint,3,opt,name=limit,proto3" json:"limit,omitempty" rule:"x >= 0 && x <= 100" dft:"10"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SearchAncientReq) Reset()         { *m = SearchAncientReq{} }
func (m *SearchAncientReq) String() string { return proto.CompactTextString(m) }
func (*SearchAncientReq) ProtoMessage()    {}
func (*SearchAncientReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_0fb5725f30f77c44, []int{4}
}
func (m *SearchAncientReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SearchAncientReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SearchAncientReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SearchAncientReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SearchAncientReq.Merge(m, src)
}
func (m *SearchAncientReq) XXX_Size() int {
	return m.Size()
}
func (m *SearchAncientReq) XXX_DiscardUnknown() {
	xxx_messageInfo_SearchAncientReq.DiscardUnknown(m)
}

var xxx_messageInfo_SearchAncientReq proto.InternalMessageInfo

func (m *SearchAncientReq) GetKeyword() string {
	if m != nil {
		return m.Keyword
	}
	return ""
}

func (m *SearchAncientReq) GetOffset() int64 {
	if m != nil {
		return m.Offset
	}
	return 0
}

func (m *SearchAncientReq) GetLimit() int64 {
	if m != nil {
		return m.Limit
	}
	return 0
}

type SearchAncientRes struct {
	Ancients             []*Ancient `protobuf:"bytes,1,rep,name=ancients,proto3" json:"ancients,omitempty"`
	XXX_NoUnkeyedLiteral struct{}   `json:"-"`
	XXX_unrecognized     []byte     `json:"-"`
	XXX_sizecache        int32      `json:"-"`
}

func (m *SearchAncientRes) Reset()         { *m = SearchAncientRes{} }
func (m *SearchAncientRes) String() string { return proto.CompactTextString(m) }
func (*SearchAncientRes) ProtoMessage()    {}
func (*SearchAncientRes) Descriptor() ([]byte, []int) {
	return fileDescriptor_0fb5725f30f77c44, []int{5}
}
func (m *SearchAncientRes) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SearchAncientRes) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SearchAncientRes.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SearchAncientRes) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SearchAncientRes.Merge(m, src)
}
func (m *SearchAncientRes) XXX_Size() int {
	return m.Size()
}
func (m *SearchAncientRes) XXX_DiscardUnknown() {
	xxx_messageInfo_SearchAncientRes.DiscardUnknown(m)
}

var xxx_messageInfo_SearchAncientRes proto.InternalMessageInfo

func (m *SearchAncientRes) GetAncients() []*Ancient {
	if m != nil {
		return m.Ancients
	}
	return nil
}

func init() {
	proto.RegisterType((*Ancient)(nil), "api.Ancient")
	proto.RegisterType((*GetAncientReq)(nil), "api.GetAncientReq")
	proto.RegisterType((*PutAncientReq)(nil), "api.PutAncientReq")
	proto.RegisterType((*UpdateAncientReq)(nil), "api.UpdateAncientReq")
	proto.RegisterType((*SearchAncientReq)(nil), "api.SearchAncientReq")
	proto.RegisterType((*SearchAncientRes)(nil), "api.SearchAncientRes")
}

func init() { proto.RegisterFile("api/ancient.proto", fileDescriptor_0fb5725f30f77c44) }

var fileDescriptor_0fb5725f30f77c44 = []byte{
	// 565 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x9c, 0x54, 0x5d, 0x6b, 0xd3, 0x50,
	0x18, 0xf6, 0x34, 0x6e, 0x75, 0xef, 0x56, 0xe9, 0x0e, 0x73, 0x84, 0x28, 0x5d, 0x3c, 0x42, 0x29,
	0xc2, 0x92, 0xb6, 0x82, 0x42, 0xe9, 0x04, 0x0b, 0x62, 0xaf, 0x64, 0x66, 0x78, 0xb3, 0xbb, 0x34,
	0x39, 0x4d, 0x0f, 0xa6, 0x39, 0x31, 0x39, 0x9d, 0x2b, 0xb2, 0x9b, 0xfd, 0x80, 0x21, 0x78, 0xe3,
	0x4f, 0xf2, 0x52, 0xf0, 0x7e, 0x48, 0xf5, 0x17, 0xec, 0x17, 0x48, 0x4e, 0x4e, 0x5c, 0xb3, 0x29,
	0x8a, 0x77, 0xe7, 0x79, 0x9f, 0xf3, 0x3e, 0xe7, 0x79, 0x3f, 0x12, 0xd8, 0x74, 0x63, 0x66, 0xbb,
	0x91, 0xc7, 0x68, 0x24, 0xac, 0x38, 0xe1, 0x82, 0x63, 0xcd, 0x8d, 0x99, 0x71, 0x2f, 0xe0, 0x3c,
	0x08, 0xa9, 0x9d, 0xd3, 0x11, 0x17, 0xae, 0x60, 0x3c, 0x4a, 0xf3, 0x2b, 0xc6, 0x5d, 0xc5, 0x4a,
	0x34, 0x9a, 0x8d, 0x6d, 0x3a, 0x8d, 0xc5, 0x5c, 0x91, 0x5b, 0x01, 0x0f, 0xb8, 0x3c, 0xda, 0xd9,
	0x29, 0x8f, 0x92, 0x33, 0x04, 0xd5, 0x67, 0xf9, 0x3b, 0xf8, 0x3e, 0x54, 0x98, 0xaf, 0x23, 0x13,
	0xb5, 0xb4, 0xc1, 0xe6, 0xc5, 0xf9, 0x4e, 0x2d, 0x99, 0x85, 0xb4, 0x47, 0x8e, 0xcd, 0xa7, 0x7b,
	0x66, 0x9b, 0x38, 0x15, 0xe6, 0xe3, 0x2d, 0x58, 0x11, 0x4c, 0x84, 0x54, 0xaf, 0x98, 0xa8, 0xb5,
	0xe6, 0xe4, 0x00, 0x6f, 0xc3, 0xaa, 0x3b, 0x13, 0x13, 0x9e, 0xe8, 0x9a, 0x0c, 0x2b, 0x84, 0x75,
	0xa8, 0xfa, 0xf3, 0xc8, 0x4d, 0xc5, 0x5c, 0xbf, 0x29, 0x89, 0x02, 0x66, 0x8c, 0xc7, 0x23, 0x41,
	0x23, 0xa1, 0xaf, 0xe4, 0x8c, 0x82, 0xa4, 0x0b, 0xb5, 0x17, 0x54, 0x28, 0x4b, 0x0e, 0x7d, 0xfb,
	0x0f, 0xae, 0xc8, 0x13, 0xa8, 0xed, 0xcf, 0x96, 0x73, 0x9a, 0x50, 0x55, 0xcd, 0x93, 0x89, 0xeb,
	0xdd, 0x0d, 0xcb, 0x8d, 0x99, 0x55, 0xdc, 0x28, 0x48, 0xd2, 0x83, 0xfa, 0xeb, 0xd8, 0x77, 0x05,
	0xfd, 0x8f, 0xdc, 0x53, 0x04, 0xf5, 0x03, 0xea, 0x26, 0xde, 0x64, 0x29, 0x59, 0x87, 0xea, 0x1b,
	0x3a, 0x7f, 0xc7, 0x93, 0xdc, 0xf1, 0x9a, 0x53, 0xc0, 0xac, 0x47, 0x7c, 0x3c, 0x4e, 0xa9, 0x90,
	0xad, 0xd3, 0x1c, 0x85, 0x70, 0x1f, 0x56, 0x42, 0x36, 0x65, 0x42, 0xb6, 0x4e, 0x1b, 0x34, 0x2f,
	0xce, 0x77, 0xc8, 0x72, 0x85, 0x66, 0xb3, 0x69, 0x1e, 0x9b, 0xfd, 0x3d, 0xb3, 0xd3, 0x6e, 0x13,
	0xd3, 0x1f, 0x8b, 0x1e, 0xe9, 0xb4, 0x89, 0x93, 0x27, 0x91, 0xfe, 0x35, 0x0f, 0x29, 0x6e, 0xc1,
	0x2d, 0xe5, 0x31, 0xd5, 0x91, 0xa9, 0x5d, 0xab, 0xe0, 0x17, 0xdb, 0xfd, 0xa0, 0xc1, 0x6d, 0x15,
	0x3d, 0xa0, 0xc9, 0x11, 0xf3, 0x28, 0x1e, 0x02, 0x5c, 0xb6, 0x1f, 0x63, 0x99, 0x58, 0x9a, 0x87,
	0x51, 0x12, 0x23, 0xfa, 0xe9, 0xd7, 0x1f, 0x1f, 0x2b, 0x18, 0xd7, 0xed, 0xa3, 0x4e, 0xb1, 0xb0,
	0xf6, 0x7b, 0xe6, 0x9f, 0xe0, 0x7d, 0x80, 0xcb, 0xa1, 0x28, 0xa5, 0xd2, 0x94, 0x8c, 0x6d, 0x2b,
	0xdf, 0x57, 0xab, 0xd8, 0x57, 0xeb, 0x79, 0xb6, 0xaf, 0x64, 0x5b, 0x6a, 0xd6, 0xc9, 0xfa, 0x92,
	0x66, 0x0f, 0x3d, 0xc4, 0x67, 0x08, 0x6a, 0xa5, 0x71, 0xe1, 0x3b, 0x52, 0xf5, 0xea, 0x08, 0xff,
	0x28, 0xfc, 0x52, 0x0a, 0x0f, 0x0d, 0xbd, 0x64, 0xb6, 0xf8, 0xcc, 0x98, 0x7f, 0xd2, 0x2b, 0xa6,
	0x7b, 0xf8, 0xa0, 0xfb, 0xf7, 0x4b, 0xf8, 0x15, 0xd4, 0x4a, 0xdd, 0x57, 0x7e, 0xae, 0x6e, 0x85,
	0xf1, 0xdb, 0x70, 0x4a, 0xb0, 0xb4, 0xb3, 0x81, 0x21, 0x7b, 0x29, 0x95, 0xec, 0x60, 0xf8, 0x79,
	0xd1, 0x40, 0x5f, 0x16, 0x0d, 0xf4, 0x6d, 0xd1, 0x40, 0x9f, 0xbe, 0x37, 0x6e, 0x1c, 0x3e, 0x0e,
	0x98, 0x98, 0xcc, 0x46, 0x96, 0xc7, 0xa7, 0xf6, 0xc4, 0x15, 0x21, 0x8f, 0x68, 0x38, 0xb7, 0x03,
	0xbe, 0x9b, 0xc4, 0x9e, 0x9d, 0xc4, 0xde, 0x6e, 0xe1, 0x31, 0xfb, 0x27, 0x04, 0x34, 0xb2, 0x03,
	0x9e, 0x1d, 0x47, 0xab, 0xb2, 0xf8, 0x47, 0x3f, 0x03, 0x00, 0x00, 0xff, 0xff, 0x76, 0x78, 0x3c,
	0x50, 0x4b, 0x04, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// AncientServiceClient is the client API for AncientService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type AncientServiceClient interface {
	GetAncient(ctx context.Context, in *GetAncientReq, opts ...grpc.CallOption) (*Ancient, error)
	PutAncient(ctx context.Context, in *PutAncientReq, opts ...grpc.CallOption) (*empty.Empty, error)
	UpdateAncient(ctx context.Context, in *UpdateAncientReq, opts ...grpc.CallOption) (*empty.Empty, error)
	SearchAncient(ctx context.Context, in *SearchAncientReq, opts ...grpc.CallOption) (*SearchAncientRes, error)
}

type ancientServiceClient struct {
	cc *grpc.ClientConn
}

func NewAncientServiceClient(cc *grpc.ClientConn) AncientServiceClient {
	return &ancientServiceClient{cc}
}

func (c *ancientServiceClient) GetAncient(ctx context.Context, in *GetAncientReq, opts ...grpc.CallOption) (*Ancient, error) {
	out := new(Ancient)
	err := c.cc.Invoke(ctx, "/api.AncientService/GetAncient", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ancientServiceClient) PutAncient(ctx context.Context, in *PutAncientReq, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/api.AncientService/PutAncient", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ancientServiceClient) UpdateAncient(ctx context.Context, in *UpdateAncientReq, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/api.AncientService/UpdateAncient", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ancientServiceClient) SearchAncient(ctx context.Context, in *SearchAncientReq, opts ...grpc.CallOption) (*SearchAncientRes, error) {
	out := new(SearchAncientRes)
	err := c.cc.Invoke(ctx, "/api.AncientService/SearchAncient", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AncientServiceServer is the server API for AncientService service.
type AncientServiceServer interface {
	GetAncient(context.Context, *GetAncientReq) (*Ancient, error)
	PutAncient(context.Context, *PutAncientReq) (*empty.Empty, error)
	UpdateAncient(context.Context, *UpdateAncientReq) (*empty.Empty, error)
	SearchAncient(context.Context, *SearchAncientReq) (*SearchAncientRes, error)
}

// UnimplementedAncientServiceServer can be embedded to have forward compatible implementations.
type UnimplementedAncientServiceServer struct {
}

func (*UnimplementedAncientServiceServer) GetAncient(ctx context.Context, req *GetAncientReq) (*Ancient, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAncient not implemented")
}
func (*UnimplementedAncientServiceServer) PutAncient(ctx context.Context, req *PutAncientReq) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PutAncient not implemented")
}
func (*UnimplementedAncientServiceServer) UpdateAncient(ctx context.Context, req *UpdateAncientReq) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateAncient not implemented")
}
func (*UnimplementedAncientServiceServer) SearchAncient(ctx context.Context, req *SearchAncientReq) (*SearchAncientRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SearchAncient not implemented")
}

func RegisterAncientServiceServer(s *grpc.Server, srv AncientServiceServer) {
	s.RegisterService(&_AncientService_serviceDesc, srv)
}

func _AncientService_GetAncient_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAncientReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AncientServiceServer).GetAncient(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.AncientService/GetAncient",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AncientServiceServer).GetAncient(ctx, req.(*GetAncientReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _AncientService_PutAncient_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PutAncientReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AncientServiceServer).PutAncient(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.AncientService/PutAncient",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AncientServiceServer).PutAncient(ctx, req.(*PutAncientReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _AncientService_UpdateAncient_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateAncientReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AncientServiceServer).UpdateAncient(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.AncientService/UpdateAncient",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AncientServiceServer).UpdateAncient(ctx, req.(*UpdateAncientReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _AncientService_SearchAncient_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchAncientReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AncientServiceServer).SearchAncient(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.AncientService/SearchAncient",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AncientServiceServer).SearchAncient(ctx, req.(*SearchAncientReq))
	}
	return interceptor(ctx, in, info, handler)
}

var _AncientService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "api.AncientService",
	HandlerType: (*AncientServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetAncient",
			Handler:    _AncientService_GetAncient_Handler,
		},
		{
			MethodName: "PutAncient",
			Handler:    _AncientService_PutAncient_Handler,
		},
		{
			MethodName: "UpdateAncient",
			Handler:    _AncientService_UpdateAncient_Handler,
		},
		{
			MethodName: "SearchAncient",
			Handler:    _AncientService_SearchAncient_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/ancient.proto",
}

func (m *Ancient) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Ancient) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Ancient) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Content) > 0 {
		i -= len(m.Content)
		copy(dAtA[i:], m.Content)
		i = encodeVarintAncient(dAtA, i, uint64(len(m.Content)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.Dynasty) > 0 {
		i -= len(m.Dynasty)
		copy(dAtA[i:], m.Dynasty)
		i = encodeVarintAncient(dAtA, i, uint64(len(m.Dynasty)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Author) > 0 {
		i -= len(m.Author)
		copy(dAtA[i:], m.Author)
		i = encodeVarintAncient(dAtA, i, uint64(len(m.Author)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Title) > 0 {
		i -= len(m.Title)
		copy(dAtA[i:], m.Title)
		i = encodeVarintAncient(dAtA, i, uint64(len(m.Title)))
		i--
		dAtA[i] = 0x12
	}
	if m.Id != 0 {
		i = encodeVarintAncient(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *GetAncientReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetAncientReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetAncientReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Id != 0 {
		i = encodeVarintAncient(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *PutAncientReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PutAncientReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PutAncientReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Ancient != nil {
		{
			size, err := m.Ancient.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintAncient(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *UpdateAncientReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpdateAncientReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UpdateAncientReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Ancient != nil {
		{
			size, err := m.Ancient.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintAncient(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *SearchAncientReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SearchAncientReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SearchAncientReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Limit != 0 {
		i = encodeVarintAncient(dAtA, i, uint64(m.Limit))
		i--
		dAtA[i] = 0x18
	}
	if m.Offset != 0 {
		i = encodeVarintAncient(dAtA, i, uint64(m.Offset))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Keyword) > 0 {
		i -= len(m.Keyword)
		copy(dAtA[i:], m.Keyword)
		i = encodeVarintAncient(dAtA, i, uint64(len(m.Keyword)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *SearchAncientRes) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SearchAncientRes) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SearchAncientRes) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Ancients) > 0 {
		for iNdEx := len(m.Ancients) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Ancients[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintAncient(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func encodeVarintAncient(dAtA []byte, offset int, v uint64) int {
	offset -= sovAncient(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Ancient) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovAncient(uint64(m.Id))
	}
	l = len(m.Title)
	if l > 0 {
		n += 1 + l + sovAncient(uint64(l))
	}
	l = len(m.Author)
	if l > 0 {
		n += 1 + l + sovAncient(uint64(l))
	}
	l = len(m.Dynasty)
	if l > 0 {
		n += 1 + l + sovAncient(uint64(l))
	}
	l = len(m.Content)
	if l > 0 {
		n += 1 + l + sovAncient(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GetAncientReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovAncient(uint64(m.Id))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *PutAncientReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Ancient != nil {
		l = m.Ancient.Size()
		n += 1 + l + sovAncient(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *UpdateAncientReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Ancient != nil {
		l = m.Ancient.Size()
		n += 1 + l + sovAncient(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *SearchAncientReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Keyword)
	if l > 0 {
		n += 1 + l + sovAncient(uint64(l))
	}
	if m.Offset != 0 {
		n += 1 + sovAncient(uint64(m.Offset))
	}
	if m.Limit != 0 {
		n += 1 + sovAncient(uint64(m.Limit))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *SearchAncientRes) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Ancients) > 0 {
		for _, e := range m.Ancients {
			l = e.Size()
			n += 1 + l + sovAncient(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovAncient(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozAncient(x uint64) (n int) {
	return sovAncient(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Ancient) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAncient
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Ancient: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Ancient: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAncient
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Title", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAncient
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAncient
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAncient
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Title = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Author", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAncient
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAncient
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAncient
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Author = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Dynasty", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAncient
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAncient
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAncient
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Dynasty = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Content", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAncient
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAncient
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAncient
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Content = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAncient(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAncient
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthAncient
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetAncientReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAncient
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetAncientReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetAncientReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAncient
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipAncient(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAncient
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthAncient
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PutAncientReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAncient
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PutAncientReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PutAncientReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ancient", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAncient
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAncient
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAncient
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Ancient == nil {
				m.Ancient = &Ancient{}
			}
			if err := m.Ancient.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAncient(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAncient
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthAncient
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpdateAncientReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAncient
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpdateAncientReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpdateAncientReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ancient", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAncient
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAncient
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAncient
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Ancient == nil {
				m.Ancient = &Ancient{}
			}
			if err := m.Ancient.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAncient(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAncient
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthAncient
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SearchAncientReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAncient
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SearchAncientReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SearchAncientReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Keyword", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAncient
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAncient
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAncient
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Keyword = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Offset", wireType)
			}
			m.Offset = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAncient
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Offset |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Limit", wireType)
			}
			m.Limit = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAncient
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Limit |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipAncient(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAncient
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthAncient
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SearchAncientRes) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAncient
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SearchAncientRes: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SearchAncientRes: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ancients", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAncient
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAncient
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAncient
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Ancients = append(m.Ancients, &Ancient{})
			if err := m.Ancients[len(m.Ancients)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAncient(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAncient
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthAncient
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipAncient(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowAncient
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowAncient
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowAncient
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthAncient
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupAncient
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthAncient
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthAncient        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowAncient          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupAncient = fmt.Errorf("proto: unexpected end of group")
)
